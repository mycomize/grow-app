"""Initial revision

Revision ID: 78500d18f273
Revises: 
Create Date: 2025-09-12 10:19:23.381237

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '78500d18f273'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('profile_image', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('payment_status', sa.Enum('unpaid', 'paid', 'failed', name='paymentstatus'), nullable=False),
    sa.Column('payment_method', sa.Enum('stripe', 'bitcoin', name='paymentmethod'), nullable=True),
    sa.Column('payment_date', sa.DateTime(), nullable=True),
    sa.Column('stripe_customer_id', sa.String(), nullable=True),
    sa.Column('stripe_payment_intent_id', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('bulk_grow_teks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('species', sa.Text(), nullable=False),
    sa.Column('variant', sa.Text(), nullable=True),
    sa.Column('tags', sa.Text(), nullable=True),
    sa.Column('stages', sa.Text(), nullable=True),
    sa.Column('like_count', sa.Text(), nullable=True),
    sa.Column('view_count', sa.Text(), nullable=True),
    sa.Column('import_count', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('bulk_grow_teks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_bulk_grow_teks_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_bulk_grow_teks_is_public'), ['is_public'], unique=False)

    op.create_table('bulk_grows',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('species', sa.Text(), nullable=True),
    sa.Column('variant', sa.Text(), nullable=True),
    sa.Column('location', sa.Text(), nullable=True),
    sa.Column('tags', sa.Text(), nullable=True),
    sa.Column('inoculation_date', sa.Text(), nullable=True),
    sa.Column('inoculation_status', sa.Text(), nullable=True),
    sa.Column('spawn_start_date', sa.Text(), nullable=True),
    sa.Column('spawn_colonization_status', sa.Text(), nullable=True),
    sa.Column('bulk_start_date', sa.Text(), nullable=True),
    sa.Column('bulk_colonization_status', sa.Text(), nullable=True),
    sa.Column('fruiting_start_date', sa.Text(), nullable=True),
    sa.Column('fruiting_status', sa.Text(), nullable=True),
    sa.Column('full_spawn_colonization_date', sa.Text(), nullable=True),
    sa.Column('full_bulk_colonization_date', sa.Text(), nullable=True),
    sa.Column('fruiting_pin_date', sa.Text(), nullable=True),
    sa.Column('harvest_completion_date', sa.Text(), nullable=True),
    sa.Column('s2b_ratio', sa.Text(), nullable=True),
    sa.Column('current_stage', sa.Text(), nullable=True),
    sa.Column('status', sa.Text(), nullable=True),
    sa.Column('total_cost', sa.Text(), nullable=True),
    sa.Column('stages', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('bulk_grows', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_bulk_grows_id'), ['id'], unique=False)

    op.create_table('iot_gateways',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('type', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('api_url', sa.Text(), nullable=False),
    sa.Column('api_key', sa.Text(), nullable=False),
    sa.Column('linked_entities_count', sa.Text(), nullable=True),
    sa.Column('linkable_entities_count', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('iot_gateways', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_iot_gateways_id'), ['id'], unique=False)

    op.create_table('calendar_tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('parent_task_id', sa.String(length=255), nullable=False),
    sa.Column('grow_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('action', sa.Text(), nullable=False),
    sa.Column('stage_key', sa.Text(), nullable=False),
    sa.Column('date', sa.Text(), nullable=False),
    sa.Column('time', sa.Text(), nullable=False),
    sa.Column('status', sa.Text(), nullable=False),
    sa.Column('notification_enabled', sa.Text(), nullable=True),
    sa.Column('notification_id', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['grow_id'], ['bulk_grows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('calendar_tasks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_calendar_tasks_grow_id'), ['grow_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_calendar_tasks_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_calendar_tasks_parent_task_id'), ['parent_task_id'], unique=False)

    op.create_table('flushes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('bulk_grow_id', sa.Integer(), nullable=False),
    sa.Column('harvest_date', sa.Text(), nullable=True),
    sa.Column('wet_yield_grams', sa.Text(), nullable=True),
    sa.Column('dry_yield_grams', sa.Text(), nullable=True),
    sa.Column('concentration_mg_per_gram', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['bulk_grow_id'], ['bulk_grows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('flushes', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_flushes_id'), ['id'], unique=False)

    op.create_table('iot_entities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('gateway_id', sa.Integer(), nullable=False),
    sa.Column('linked_grow_id', sa.Integer(), nullable=True),
    sa.Column('entity_name', sa.Text(), nullable=False),
    sa.Column('entity_type', sa.Text(), nullable=False),
    sa.Column('friendly_name', sa.Text(), nullable=True),
    sa.Column('domain', sa.Text(), nullable=False),
    sa.Column('device_class', sa.Text(), nullable=False),
    sa.Column('linked_stage', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['gateway_id'], ['iot_gateways.id'], ),
    sa.ForeignKeyConstraint(['linked_grow_id'], ['bulk_grows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('iot_entities', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_iot_entities_id'), ['id'], unique=False)

    op.create_table('tek_imports',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tek_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['tek_id'], ['bulk_grow_teks.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('tek_imports', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tek_imports_id'), ['id'], unique=False)

    op.create_table('tek_likes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tek_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['tek_id'], ['bulk_grow_teks.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tek_id', 'user_id', name='unique_tek_like')
    )
    with op.batch_alter_table('tek_likes', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tek_likes_id'), ['id'], unique=False)

    op.create_table('tek_views',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tek_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['tek_id'], ['bulk_grow_teks.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tek_id', 'user_id', name='unique_tek_view')
    )
    with op.batch_alter_table('tek_views', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tek_views_id'), ['id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('tek_views', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tek_views_id'))

    op.drop_table('tek_views')
    with op.batch_alter_table('tek_likes', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tek_likes_id'))

    op.drop_table('tek_likes')
    with op.batch_alter_table('tek_imports', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tek_imports_id'))

    op.drop_table('tek_imports')
    with op.batch_alter_table('iot_entities', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_iot_entities_id'))

    op.drop_table('iot_entities')
    with op.batch_alter_table('flushes', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_flushes_id'))

    op.drop_table('flushes')
    with op.batch_alter_table('calendar_tasks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_calendar_tasks_parent_task_id'))
        batch_op.drop_index(batch_op.f('ix_calendar_tasks_id'))
        batch_op.drop_index(batch_op.f('ix_calendar_tasks_grow_id'))

    op.drop_table('calendar_tasks')
    with op.batch_alter_table('iot_gateways', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_iot_gateways_id'))

    op.drop_table('iot_gateways')
    with op.batch_alter_table('bulk_grows', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_bulk_grows_id'))

    op.drop_table('bulk_grows')
    with op.batch_alter_table('bulk_grow_teks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_bulk_grow_teks_is_public'))
        batch_op.drop_index(batch_op.f('ix_bulk_grow_teks_id'))

    op.drop_table('bulk_grow_teks')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_id'))

    op.drop_table('users')
    # ### end Alembic commands ###
