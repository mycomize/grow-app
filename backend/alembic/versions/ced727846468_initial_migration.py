"""Initial migration

Revision ID: ced727846468
Revises: 
Create Date: 2025-06-22 12:41:30.224569

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ced727846468'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('grows',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.Column('species', sa.String(length=64), nullable=True),
    sa.Column('variant', sa.String(length=64), nullable=True),
    sa.Column('inoculation_date', sa.Date(), nullable=True),
    sa.Column('tek', sa.String(length=64), nullable=True),
    sa.Column('stage', sa.String(length=64), nullable=True),
    sa.Column('current_stage', sa.String(length=64), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=64), nullable=True),
    sa.Column('cost', sa.Float(), nullable=True),
    sa.Column('spawn_colonization_date', sa.Date(), nullable=True),
    sa.Column('bulk_colonization_date', sa.Date(), nullable=True),
    sa.Column('harvest_date', sa.Date(), nullable=True),
    sa.Column('harvest_dry_weight_grams', sa.Float(), nullable=True),
    sa.Column('harvest_wet_weight_grams', sa.Float(), nullable=True),
    sa.Column('syringe_vendor', sa.String(length=128), nullable=True),
    sa.Column('syringe_volume_ml', sa.Float(), nullable=True),
    sa.Column('syringe_cost', sa.Float(), nullable=True),
    sa.Column('syringe_created_at', sa.Date(), nullable=True),
    sa.Column('syringe_expiration_date', sa.Date(), nullable=True),
    sa.Column('spawn_type', sa.String(length=128), nullable=True),
    sa.Column('spawn_weight_lbs', sa.Float(), nullable=True),
    sa.Column('spawn_cost', sa.Float(), nullable=True),
    sa.Column('spawn_vendor', sa.String(length=128), nullable=True),
    sa.Column('bulk_type', sa.String(length=128), nullable=True),
    sa.Column('bulk_weight_lbs', sa.Float(), nullable=True),
    sa.Column('bulk_cost', sa.Float(), nullable=True),
    sa.Column('bulk_vendor', sa.String(length=128), nullable=True),
    sa.Column('bulk_created_at', sa.Date(), nullable=True),
    sa.Column('bulk_expiration_date', sa.Date(), nullable=True),
    sa.Column('fruiting_start_date', sa.Date(), nullable=True),
    sa.Column('fruiting_pin_date', sa.Date(), nullable=True),
    sa.Column('fruiting_mist_frequency', sa.String(length=64), nullable=True),
    sa.Column('fruiting_fan_frequency', sa.String(length=64), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('grows', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_grows_id'), ['id'], unique=False)

    op.create_table('inventory_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=64), nullable=False),
    sa.Column('source', sa.String(length=128), nullable=True),
    sa.Column('source_date', sa.Date(), nullable=False),
    sa.Column('expiration_date', sa.Date(), nullable=True),
    sa.Column('cost', sa.Float(), nullable=True),
    sa.Column('notes', sa.String(length=512), nullable=True),
    sa.Column('in_use', sa.Boolean(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('syringe_type', sa.String(length=64), nullable=True),
    sa.Column('volume_ml', sa.Float(), nullable=True),
    sa.Column('species', sa.String(length=64), nullable=True),
    sa.Column('variant', sa.String(length=64), nullable=True),
    sa.Column('spawn_type', sa.String(length=64), nullable=True),
    sa.Column('bulk_type', sa.String(length=64), nullable=True),
    sa.Column('amount_lbs', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('inventory_items', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_inventory_items_id'), ['id'], unique=False)

    op.create_table('iot_gateways',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=64), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('api_url', sa.String(length=256), nullable=False),
    sa.Column('api_key', sa.String(length=256), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('grow_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['grow_id'], ['grows.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('iot_gateways', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_iot_gateways_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_iot_gateways_name'), ['name'], unique=False)

    op.create_table('iot_entities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('gateway_id', sa.Integer(), nullable=False),
    sa.Column('entity_id', sa.String(length=256), nullable=False),
    sa.Column('entity_type', sa.String(length=64), nullable=False),
    sa.Column('friendly_name', sa.String(length=256), nullable=True),
    sa.Column('is_enabled', sa.Boolean(), nullable=True),
    sa.Column('last_state', sa.String(length=64), nullable=True),
    sa.Column('last_attributes', sa.JSON(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['gateway_id'], ['iot_gateways.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('iot_entities', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_iot_entities_entity_id'), ['entity_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_iot_entities_id'), ['id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('iot_entities', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_iot_entities_id'))
        batch_op.drop_index(batch_op.f('ix_iot_entities_entity_id'))

    op.drop_table('iot_entities')
    with op.batch_alter_table('iot_gateways', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_iot_gateways_name'))
        batch_op.drop_index(batch_op.f('ix_iot_gateways_id'))

    op.drop_table('iot_gateways')
    with op.batch_alter_table('inventory_items', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_inventory_items_id'))

    op.drop_table('inventory_items')
    with op.batch_alter_table('grows', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_grows_id'))

    op.drop_table('grows')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_id'))

    op.drop_table('users')
    # ### end Alembic commands ###
